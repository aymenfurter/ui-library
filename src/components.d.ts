/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DateCallback, FormatLabelCallback, } from "./components/datepicker/datepicker";
import { DateCallback as DateCallback1, } from "./components/datepicker/datepicker";
import { Option, } from "./components/dropdown-option/dropdown-option.types";
import { TabItemOptions, } from "./components/tab-item/tab-item";
import { TabItemOptions as TabItemOptions1, } from "./components/tab-item/tab-item";
export namespace Components {
    interface BalAccordion {
        /**
          * Close the accordion
         */
        "close": () => Promise<void>;
        /**
          * Bal-Icon of the close trigger button
         */
        "closeIcon": string;
        /**
          * Label of the close trigger button
         */
        "closeLabel": string;
        /**
          * Controls if the accordion is collapsed or not
         */
        "collapsed": boolean;
        /**
          * Open the accordion
         */
        "open": () => Promise<void>;
        /**
          * Bal-Icon of the open trigger button
         */
        "openIcon": string;
        /**
          * Label of the open trigger button
         */
        "openLabel": string;
        /**
          * Triggers the accordion
         */
        "toggle": () => Promise<void>;
        /**
          * Type defines the theme of the accordion toggle
         */
        "type": "is-primary" | "is-info";
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottemRounded": boolean;
        /**
          * If `true` the button is dense
         */
        "dense": boolean;
        /**
          * If `true` the button is disabled
         */
        "disabled": boolean;
        /**
          * If `true` the button has a full width
         */
        "expanded": boolean;
        /**
          * If `true` the button is inverted
         */
        "inverted": boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive": boolean;
        /**
          * If `true` the width of the buttons is limited
         */
        "isSquare": boolean;
        /**
          * If `true` the button has a light color
         */
        "light": boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading": boolean;
        /**
          * If `true` the button is outlined
         */
        "outlined": boolean;
        /**
          * Size of the button
         */
        "size": "is-small" | "";
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "type": "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger" | "is-link";
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border": boolean;
        /**
          * If `true` the card loses its shadow.
         */
        "flat": boolean;
        /**
          * If `true` the card loses its border radius.
         */
        "square": boolean;
    }
    interface BalCardActions {
        /**
          * If `true` the buttons start form right to left.
         */
        "right": boolean;
    }
    interface BalCardButton {
        /**
          * Name of the icon like `edit`.
         */
        "icon": string;
    }
    interface BalCardContent {
    }
    interface BalCardHeading {
    }
    interface BalCardSubtitle {
    }
    interface BalCardTitle {
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border": boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal": boolean;
    }
    interface BalDataItem {
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled": boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required": boolean;
    }
    interface BalDataValue {
    }
    interface BalDatepicker {
        /**
          * Close the datepicker dropdown
         */
        "close": () => Promise<void>;
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect": boolean;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "filter": DateCallback;
        /**
          * Callback to format or modify a changed value pefore display.
         */
        "formatLabel": FormatLabelCallback;
        /**
          * Language of the datepicker. Possible values are `de`, `fr`,`it` or `en`.
         */
        "language": string;
        /**
          * Latest date available for selection
         */
        "maxDate": string;
        /**
          * Latest year available for selection
         */
        "maxYear": string;
        /**
          * Earliest date available for selection
         */
        "minDate": string;
        /**
          * Earliest year available for selection
         */
        "minYear": string;
        /**
          * Open the datepicker dropdown
         */
        "open": () => Promise<void>;
        /**
          * Placeholder text to render if no date has been selected.
         */
        "placeholder": string;
        /**
          * The value of the datepicker with the format `dd.MM.yyyy`.
         */
        "value": string;
    }
    interface BalDatetimepicker {
        /**
          * Close the timepicke dropdown
         */
        "close": () => Promise<void>;
        /**
          * Callback to determine which date in the datetimepicker should be selectable.
         */
        "dateFilter": DateCallback;
        /**
          * Disable the input
         */
        "disabled": boolean;
        /**
          * Latest date available for selection
         */
        "maxDatetime": string;
        /**
          * Latest year available for selection
         */
        "maxYear": string;
        /**
          * Earliest datetime available for selection
         */
        "minDatetime": string;
        /**
          * Earliest year available for selection
         */
        "minYear": string;
        /**
          * Open the timepicke dropdown
         */
        "open": () => Promise<void>;
        /**
          * Placeholder text to render if no date has been selected.
         */
        "placeholder": string;
        /**
          * The value of the timepicke with the format `dd.MM.yyyy`.
         */
        "value": string;
    }
    interface BalDropdown {
        /**
          * Closes the dropdown menu.
         */
        "close": () => Promise<void>;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * If `true`, the component uses the whole width.
         */
        "expanded": boolean;
        /**
          * If `true`, the height of the dropdown content is fixed.
         */
        "fixed": boolean;
        /**
          * Returns the value of the dropdown.
         */
        "getSelected": () => Promise<Option>;
        /**
          * Open the dropdown menu.
         */
        "open": () => Promise<void>;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder": string;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "readonly": boolean;
        /**
          * Selects an option.
         */
        "select": (option: Option) => Promise<void>;
        /**
          * Open & closes the dropdown.
         */
        "toggle": () => Promise<void>;
        /**
          * Defines the trigger icon on the right site.
         */
        "triggerIcon": string;
        /**
          * If `true`, the use can search for the option.
         */
        "typeahead": boolean;
        /**
          * The value of the selected dropdown item.
         */
        "value": string | Option;
    }
    interface BalDropdownOption {
        /**
          * TODO: Describe
         */
        "activated": boolean;
        /**
          * TODO: Describe
         */
        "highlight": string;
        /**
          * Tell's if the item is activated by selection.
         */
        "isHidden": () => Promise<boolean>;
        /**
          * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
         */
        "label": string;
        /**
          * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
         */
        "value": string | boolean | number | object;
    }
    interface BalField {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft": string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight": string;
        /**
          * Label text
         */
        "label": string;
        /**
          * If `true` a asterix (*) is added to the label text
         */
        "required": boolean;
        /**
          * Validation message text
         */
        "validationMessage": string;
    }
    interface BalFilterButton {
        /**
          * If `true` then the button is active/selected
         */
        "active": boolean;
    }
    interface BalHint {
        /**
          * Closes the hint box.
         */
        "close": () => Promise<void>;
        /**
          * Text for the close button.
         */
        "closeLabel": string;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Opens the hint box.
         */
        "open": () => Promise<void>;
        /**
          * Toggles the hint box.
         */
        "toggle": () => Promise<void>;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        "isLeft": boolean;
        "isRight": boolean;
        /**
          * The name of the icon without the bal-icon prefix.
         */
        "name": string;
        /**
          * Defines the size of the icon.
         */
        "size": "small" | "medium" | "large" | "";
    }
    interface BalList {
        /**
          * If `true` each list item has a bottom border
         */
        "border": boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled": boolean;
        /**
          * If `true` the list can be used on a dark backround
         */
        "inverted": boolean;
    }
    interface BalListItem {
        /**
          * If `true` the list item can be hovered
         */
        "disabled": boolean;
        /**
          * If `true` the list item has a selected theme
         */
        "selected": boolean;
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right": boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalModal {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
    }
    interface BalModalActions {
    }
    interface BalModalCard {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
    }
    interface BalModalCardActions {
    }
    interface BalModalTitle {
    }
    interface BalNavbar {
        "light": boolean;
        "logoHref": string;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled": boolean;
        "next": () => Promise<void>;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange": number;
        "previous": () => Promise<void>;
        /**
          * The total amount of pages
         */
        "totalPages": number;
        /**
          * Current selected page
         */
        "value": number;
    }
    interface BalSpinner {
    }
    interface BalTabItem {
        /**
          * Tell's if the tab is active and the content is visible.
         */
        "active": boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble": boolean;
        /**
          * If `true` the tab is disabled.
         */
        "disabled": boolean;
        /**
          * Options of the tab like label, value etc.
         */
        "getOptions": () => Promise<TabItemOptions>;
        /**
          * Label for the tab.
         */
        "label": string;
        /**
          * Sets the tab active.
         */
        "setActive": (active: boolean) => Promise<void>;
        /**
          * This is the key of the tab.
         */
        "value": string;
    }
    interface BalTabs {
        /**
          * If `true` the the padding gets reduced.
         */
        "dense": boolean;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded": boolean;
        /**
          * If you want the rounded tab style.
         */
        "rounded": boolean;
        /**
          * Dropdown a tab by the value of the tab item.
         */
        "select": (value: string) => Promise<void>;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "type": "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger" | "";
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled": boolean;
        /**
          * Latest date available for selection
         */
        "maxTime": string;
        /**
          * Earliest date available for selection
         */
        "minTime": string;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value": string;
    }
    interface BalToast {
        /**
          * Closes this toast
         */
        "close": () => Promise<void>;
        /**
          * Closes the toast after the given duration in ms
         */
        "closeIn": (duration: number) => Promise<void>;
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "type": "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger";
    }
}
declare global {
    interface HTMLBalAccordionElement extends Components.BalAccordion, HTMLStencilElement {
    }
    var HTMLBalAccordionElement: {
        prototype: HTMLBalAccordionElement;
        new (): HTMLBalAccordionElement;
    };
    interface HTMLBalButtonElement extends Components.BalButton, HTMLStencilElement {
    }
    var HTMLBalButtonElement: {
        prototype: HTMLBalButtonElement;
        new (): HTMLBalButtonElement;
    };
    interface HTMLBalCardElement extends Components.BalCard, HTMLStencilElement {
    }
    var HTMLBalCardElement: {
        prototype: HTMLBalCardElement;
        new (): HTMLBalCardElement;
    };
    interface HTMLBalCardActionsElement extends Components.BalCardActions, HTMLStencilElement {
    }
    var HTMLBalCardActionsElement: {
        prototype: HTMLBalCardActionsElement;
        new (): HTMLBalCardActionsElement;
    };
    interface HTMLBalCardButtonElement extends Components.BalCardButton, HTMLStencilElement {
    }
    var HTMLBalCardButtonElement: {
        prototype: HTMLBalCardButtonElement;
        new (): HTMLBalCardButtonElement;
    };
    interface HTMLBalCardContentElement extends Components.BalCardContent, HTMLStencilElement {
    }
    var HTMLBalCardContentElement: {
        prototype: HTMLBalCardContentElement;
        new (): HTMLBalCardContentElement;
    };
    interface HTMLBalCardHeadingElement extends Components.BalCardHeading, HTMLStencilElement {
    }
    var HTMLBalCardHeadingElement: {
        prototype: HTMLBalCardHeadingElement;
        new (): HTMLBalCardHeadingElement;
    };
    interface HTMLBalCardSubtitleElement extends Components.BalCardSubtitle, HTMLStencilElement {
    }
    var HTMLBalCardSubtitleElement: {
        prototype: HTMLBalCardSubtitleElement;
        new (): HTMLBalCardSubtitleElement;
    };
    interface HTMLBalCardTitleElement extends Components.BalCardTitle, HTMLStencilElement {
    }
    var HTMLBalCardTitleElement: {
        prototype: HTMLBalCardTitleElement;
        new (): HTMLBalCardTitleElement;
    };
    interface HTMLBalDataElement extends Components.BalData, HTMLStencilElement {
    }
    var HTMLBalDataElement: {
        prototype: HTMLBalDataElement;
        new (): HTMLBalDataElement;
    };
    interface HTMLBalDataItemElement extends Components.BalDataItem, HTMLStencilElement {
    }
    var HTMLBalDataItemElement: {
        prototype: HTMLBalDataItemElement;
        new (): HTMLBalDataItemElement;
    };
    interface HTMLBalDataLabelElement extends Components.BalDataLabel, HTMLStencilElement {
    }
    var HTMLBalDataLabelElement: {
        prototype: HTMLBalDataLabelElement;
        new (): HTMLBalDataLabelElement;
    };
    interface HTMLBalDataValueElement extends Components.BalDataValue, HTMLStencilElement {
    }
    var HTMLBalDataValueElement: {
        prototype: HTMLBalDataValueElement;
        new (): HTMLBalDataValueElement;
    };
    interface HTMLBalDatepickerElement extends Components.BalDatepicker, HTMLStencilElement {
    }
    var HTMLBalDatepickerElement: {
        prototype: HTMLBalDatepickerElement;
        new (): HTMLBalDatepickerElement;
    };
    interface HTMLBalDatetimepickerElement extends Components.BalDatetimepicker, HTMLStencilElement {
    }
    var HTMLBalDatetimepickerElement: {
        prototype: HTMLBalDatetimepickerElement;
        new (): HTMLBalDatetimepickerElement;
    };
    interface HTMLBalDropdownElement extends Components.BalDropdown, HTMLStencilElement {
    }
    var HTMLBalDropdownElement: {
        prototype: HTMLBalDropdownElement;
        new (): HTMLBalDropdownElement;
    };
    interface HTMLBalDropdownOptionElement extends Components.BalDropdownOption, HTMLStencilElement {
    }
    var HTMLBalDropdownOptionElement: {
        prototype: HTMLBalDropdownOptionElement;
        new (): HTMLBalDropdownOptionElement;
    };
    interface HTMLBalFieldElement extends Components.BalField, HTMLStencilElement {
    }
    var HTMLBalFieldElement: {
        prototype: HTMLBalFieldElement;
        new (): HTMLBalFieldElement;
    };
    interface HTMLBalFilterButtonElement extends Components.BalFilterButton, HTMLStencilElement {
    }
    var HTMLBalFilterButtonElement: {
        prototype: HTMLBalFilterButtonElement;
        new (): HTMLBalFilterButtonElement;
    };
    interface HTMLBalHintElement extends Components.BalHint, HTMLStencilElement {
    }
    var HTMLBalHintElement: {
        prototype: HTMLBalHintElement;
        new (): HTMLBalHintElement;
    };
    interface HTMLBalHintTextElement extends Components.BalHintText, HTMLStencilElement {
    }
    var HTMLBalHintTextElement: {
        prototype: HTMLBalHintTextElement;
        new (): HTMLBalHintTextElement;
    };
    interface HTMLBalHintTitleElement extends Components.BalHintTitle, HTMLStencilElement {
    }
    var HTMLBalHintTitleElement: {
        prototype: HTMLBalHintTitleElement;
        new (): HTMLBalHintTitleElement;
    };
    interface HTMLBalIconElement extends Components.BalIcon, HTMLStencilElement {
    }
    var HTMLBalIconElement: {
        prototype: HTMLBalIconElement;
        new (): HTMLBalIconElement;
    };
    interface HTMLBalListElement extends Components.BalList, HTMLStencilElement {
    }
    var HTMLBalListElement: {
        prototype: HTMLBalListElement;
        new (): HTMLBalListElement;
    };
    interface HTMLBalListItemElement extends Components.BalListItem, HTMLStencilElement {
    }
    var HTMLBalListItemElement: {
        prototype: HTMLBalListItemElement;
        new (): HTMLBalListItemElement;
    };
    interface HTMLBalListItemContentElement extends Components.BalListItemContent, HTMLStencilElement {
    }
    var HTMLBalListItemContentElement: {
        prototype: HTMLBalListItemContentElement;
        new (): HTMLBalListItemContentElement;
    };
    interface HTMLBalListItemIconElement extends Components.BalListItemIcon, HTMLStencilElement {
    }
    var HTMLBalListItemIconElement: {
        prototype: HTMLBalListItemIconElement;
        new (): HTMLBalListItemIconElement;
    };
    interface HTMLBalListItemSubtitleElement extends Components.BalListItemSubtitle, HTMLStencilElement {
    }
    var HTMLBalListItemSubtitleElement: {
        prototype: HTMLBalListItemSubtitleElement;
        new (): HTMLBalListItemSubtitleElement;
    };
    interface HTMLBalListItemTitleElement extends Components.BalListItemTitle, HTMLStencilElement {
    }
    var HTMLBalListItemTitleElement: {
        prototype: HTMLBalListItemTitleElement;
        new (): HTMLBalListItemTitleElement;
    };
    interface HTMLBalModalElement extends Components.BalModal, HTMLStencilElement {
    }
    var HTMLBalModalElement: {
        prototype: HTMLBalModalElement;
        new (): HTMLBalModalElement;
    };
    interface HTMLBalModalActionsElement extends Components.BalModalActions, HTMLStencilElement {
    }
    var HTMLBalModalActionsElement: {
        prototype: HTMLBalModalActionsElement;
        new (): HTMLBalModalActionsElement;
    };
    interface HTMLBalModalCardElement extends Components.BalModalCard, HTMLStencilElement {
    }
    var HTMLBalModalCardElement: {
        prototype: HTMLBalModalCardElement;
        new (): HTMLBalModalCardElement;
    };
    interface HTMLBalModalCardActionsElement extends Components.BalModalCardActions, HTMLStencilElement {
    }
    var HTMLBalModalCardActionsElement: {
        prototype: HTMLBalModalCardActionsElement;
        new (): HTMLBalModalCardActionsElement;
    };
    interface HTMLBalModalTitleElement extends Components.BalModalTitle, HTMLStencilElement {
    }
    var HTMLBalModalTitleElement: {
        prototype: HTMLBalModalTitleElement;
        new (): HTMLBalModalTitleElement;
    };
    interface HTMLBalNavbarElement extends Components.BalNavbar, HTMLStencilElement {
    }
    var HTMLBalNavbarElement: {
        prototype: HTMLBalNavbarElement;
        new (): HTMLBalNavbarElement;
    };
    interface HTMLBalPaginationElement extends Components.BalPagination, HTMLStencilElement {
    }
    var HTMLBalPaginationElement: {
        prototype: HTMLBalPaginationElement;
        new (): HTMLBalPaginationElement;
    };
    interface HTMLBalSpinnerElement extends Components.BalSpinner, HTMLStencilElement {
    }
    var HTMLBalSpinnerElement: {
        prototype: HTMLBalSpinnerElement;
        new (): HTMLBalSpinnerElement;
    };
    interface HTMLBalTabItemElement extends Components.BalTabItem, HTMLStencilElement {
    }
    var HTMLBalTabItemElement: {
        prototype: HTMLBalTabItemElement;
        new (): HTMLBalTabItemElement;
    };
    interface HTMLBalTabsElement extends Components.BalTabs, HTMLStencilElement {
    }
    var HTMLBalTabsElement: {
        prototype: HTMLBalTabsElement;
        new (): HTMLBalTabsElement;
    };
    interface HTMLBalTagElement extends Components.BalTag, HTMLStencilElement {
    }
    var HTMLBalTagElement: {
        prototype: HTMLBalTagElement;
        new (): HTMLBalTagElement;
    };
    interface HTMLBalTimeinputElement extends Components.BalTimeinput, HTMLStencilElement {
    }
    var HTMLBalTimeinputElement: {
        prototype: HTMLBalTimeinputElement;
        new (): HTMLBalTimeinputElement;
    };
    interface HTMLBalToastElement extends Components.BalToast, HTMLStencilElement {
    }
    var HTMLBalToastElement: {
        prototype: HTMLBalToastElement;
        new (): HTMLBalToastElement;
    };
    interface HTMLElementTagNameMap {
        "bal-accordion": HTMLBalAccordionElement;
        "bal-button": HTMLBalButtonElement;
        "bal-card": HTMLBalCardElement;
        "bal-card-actions": HTMLBalCardActionsElement;
        "bal-card-button": HTMLBalCardButtonElement;
        "bal-card-content": HTMLBalCardContentElement;
        "bal-card-heading": HTMLBalCardHeadingElement;
        "bal-card-subtitle": HTMLBalCardSubtitleElement;
        "bal-card-title": HTMLBalCardTitleElement;
        "bal-data": HTMLBalDataElement;
        "bal-data-item": HTMLBalDataItemElement;
        "bal-data-label": HTMLBalDataLabelElement;
        "bal-data-value": HTMLBalDataValueElement;
        "bal-datepicker": HTMLBalDatepickerElement;
        "bal-datetimepicker": HTMLBalDatetimepickerElement;
        "bal-dropdown": HTMLBalDropdownElement;
        "bal-dropdown-option": HTMLBalDropdownOptionElement;
        "bal-field": HTMLBalFieldElement;
        "bal-filter-button": HTMLBalFilterButtonElement;
        "bal-hint": HTMLBalHintElement;
        "bal-hint-text": HTMLBalHintTextElement;
        "bal-hint-title": HTMLBalHintTitleElement;
        "bal-icon": HTMLBalIconElement;
        "bal-list": HTMLBalListElement;
        "bal-list-item": HTMLBalListItemElement;
        "bal-list-item-content": HTMLBalListItemContentElement;
        "bal-list-item-icon": HTMLBalListItemIconElement;
        "bal-list-item-subtitle": HTMLBalListItemSubtitleElement;
        "bal-list-item-title": HTMLBalListItemTitleElement;
        "bal-modal": HTMLBalModalElement;
        "bal-modal-actions": HTMLBalModalActionsElement;
        "bal-modal-card": HTMLBalModalCardElement;
        "bal-modal-card-actions": HTMLBalModalCardActionsElement;
        "bal-modal-title": HTMLBalModalTitleElement;
        "bal-navbar": HTMLBalNavbarElement;
        "bal-pagination": HTMLBalPaginationElement;
        "bal-spinner": HTMLBalSpinnerElement;
        "bal-tab-item": HTMLBalTabItemElement;
        "bal-tabs": HTMLBalTabsElement;
        "bal-tag": HTMLBalTagElement;
        "bal-timeinput": HTMLBalTimeinputElement;
        "bal-toast": HTMLBalToastElement;
    }
}
declare namespace LocalJSX {
    interface BalAccordion {
        /**
          * Bal-Icon of the close trigger button
         */
        "closeIcon"?: string;
        /**
          * Label of the close trigger button
         */
        "closeLabel"?: string;
        /**
          * Controls if the accordion is collapsed or not
         */
        "collapsed"?: boolean;
        /**
          * Bal-Icon of the open trigger button
         */
        "openIcon"?: string;
        /**
          * Label of the open trigger button
         */
        "openLabel"?: string;
        /**
          * Type defines the theme of the accordion toggle
         */
        "type"?: "is-primary" | "is-info";
    }
    interface BalButton {
        /**
          * If `true` the bottom corners get rounded
         */
        "bottemRounded"?: boolean;
        /**
          * If `true` the button is dense
         */
        "dense"?: boolean;
        /**
          * If `true` the button is disabled
         */
        "disabled"?: boolean;
        /**
          * If `true` the button has a full width
         */
        "expanded"?: boolean;
        /**
          * If `true` the button is inverted
         */
        "inverted"?: boolean;
        /**
          * If `true` the button has a active theme
         */
        "isActive"?: boolean;
        /**
          * If `true` the width of the buttons is limited
         */
        "isSquare"?: boolean;
        /**
          * If `true` the button has a light color
         */
        "light"?: boolean;
        /**
          * If `true` the label is hidden and a loading spinner is shown instead.
         */
        "loading"?: boolean;
        /**
          * If `true` the button is outlined
         */
        "outlined"?: boolean;
        /**
          * Size of the button
         */
        "size"?: "is-small" | "";
        /**
          * The theme type of the button. Given by bulma our css framework.
         */
        "type"?: "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger" | "is-link";
    }
    interface BalCard {
        /**
          * If `true` a light blue border is added to the card.
         */
        "border"?: boolean;
        /**
          * If `true` the card loses its shadow.
         */
        "flat"?: boolean;
        /**
          * If `true` the card loses its border radius.
         */
        "square"?: boolean;
    }
    interface BalCardActions {
        /**
          * If `true` the buttons start form right to left.
         */
        "right"?: boolean;
    }
    interface BalCardButton {
        /**
          * Name of the icon like `edit`.
         */
        "icon"?: string;
    }
    interface BalCardContent {
    }
    interface BalCardHeading {
    }
    interface BalCardSubtitle {
    }
    interface BalCardTitle {
    }
    interface BalData {
        /**
          * If `true` a bottom border is added to the data-item.
         */
        "border"?: boolean;
        /**
          * If `true` the data list is horizontal instead of vertical.
         */
        "horizontal"?: boolean;
    }
    interface BalDataItem {
        /**
          * If `true` the item gets a lighter font color.
         */
        "disabled"?: boolean;
    }
    interface BalDataLabel {
        /**
          * If `true` an asterix is added after the label.
         */
        "required"?: boolean;
    }
    interface BalDataValue {
    }
    interface BalDatepicker {
        /**
          * Closes the datepicker dropdown after selection
         */
        "closeOnSelect"?: boolean;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Callback to determine which date in the datepicker should be selectable.
         */
        "filter"?: DateCallback;
        /**
          * Callback to format or modify a changed value pefore display.
         */
        "formatLabel"?: FormatLabelCallback;
        /**
          * Language of the datepicker. Possible values are `de`, `fr`,`it` or `en`.
         */
        "language"?: string;
        /**
          * Latest date available for selection
         */
        "maxDate"?: string;
        /**
          * Latest year available for selection
         */
        "maxYear"?: string;
        /**
          * Earliest date available for selection
         */
        "minDate"?: string;
        /**
          * Earliest year available for selection
         */
        "minYear"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggers when the value of the datepicker is changed
         */
        "onBalChange"?: (event: CustomEvent<string>) => void;
        /**
          * Placeholder text to render if no date has been selected.
         */
        "placeholder"?: string;
        /**
          * The value of the datepicker with the format `dd.MM.yyyy`.
         */
        "value"?: string;
    }
    interface BalDatetimepicker {
        /**
          * Callback to determine which date in the datetimepicker should be selectable.
         */
        "dateFilter"?: DateCallback;
        /**
          * Disable the input
         */
        "disabled"?: boolean;
        /**
          * Latest date available for selection
         */
        "maxDatetime"?: string;
        /**
          * Latest year available for selection
         */
        "maxYear"?: string;
        /**
          * Earliest datetime available for selection
         */
        "minDatetime"?: string;
        /**
          * Earliest year available for selection
         */
        "minYear"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggers when the value of the timepicke is changed
         */
        "onBalDatetimeChange"?: (event: CustomEvent<string>) => void;
        /**
          * Placeholder text to render if no date has been selected.
         */
        "placeholder"?: string;
        /**
          * The value of the timepicke with the format `dd.MM.yyyy`.
         */
        "value"?: string;
    }
    interface BalDropdown {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * If `true`, the component uses the whole width.
         */
        "expanded"?: boolean;
        /**
          * If `true`, the height of the dropdown content is fixed.
         */
        "fixed"?: boolean;
        /**
          * Emitted when the toggle loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onBalChange"?: (event: CustomEvent<Option>) => void;
        /**
          * Emitted when the toggle has focus..
         */
        "onBalFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when containing input field raises an input event.
         */
        "onBalInput"?: (event: CustomEvent<string>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "readonly"?: boolean;
        /**
          * Defines the trigger icon on the right site.
         */
        "triggerIcon"?: string;
        /**
          * If `true`, the use can search for the option.
         */
        "typeahead"?: boolean;
        /**
          * The value of the selected dropdown item.
         */
        "value"?: string | Option;
    }
    interface BalDropdownOption {
        /**
          * TODO: Describe
         */
        "activated"?: boolean;
        /**
          * TODO: Describe
         */
        "highlight"?: string;
        /**
          * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
         */
        "label"?: string;
        /**
          * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
         */
        "value"?: string | boolean | number | object;
    }
    interface BalField {
        /**
          * Baloise icon for the left side of the input
         */
        "iconLeft"?: string;
        /**
          * Baloise icon for the right side of the input
         */
        "iconRight"?: string;
        /**
          * Label text
         */
        "label"?: string;
        /**
          * If `true` a asterix (*) is added to the label text
         */
        "required"?: boolean;
        /**
          * Validation message text
         */
        "validationMessage"?: string;
    }
    interface BalFilterButton {
        /**
          * If `true` then the button is active/selected
         */
        "active"?: boolean;
        /**
          * Triggers when the value of the filter-button is changed
         */
        "onBalChange"?: (event: CustomEvent<boolean>) => void;
    }
    interface BalHint {
        /**
          * Text for the close button.
         */
        "closeLabel"?: string;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
    }
    interface BalHintText {
    }
    interface BalHintTitle {
    }
    interface BalIcon {
        "isLeft"?: boolean;
        "isRight"?: boolean;
        /**
          * The name of the icon without the bal-icon prefix.
         */
        "name"?: string;
        /**
          * Defines the size of the icon.
         */
        "size"?: "small" | "medium" | "large" | "";
    }
    interface BalList {
        /**
          * If `true` each list item has a bottom border
         */
        "border"?: boolean;
        /**
          * If `true` the list item can be hovered
         */
        "disabled"?: boolean;
        /**
          * If `true` the list can be used on a dark backround
         */
        "inverted"?: boolean;
    }
    interface BalListItem {
        /**
          * If `true` the list item can be hovered
         */
        "disabled"?: boolean;
        /**
          * If `true` the list item has a selected theme
         */
        "selected"?: boolean;
    }
    interface BalListItemContent {
    }
    interface BalListItemIcon {
        /**
          * If `true` the icon is on the right side of the list item. Default is the left side.
         */
        "right"?: boolean;
    }
    interface BalListItemSubtitle {
    }
    interface BalListItemTitle {
    }
    interface BalModal {
    }
    interface BalModalActions {
    }
    interface BalModalCard {
    }
    interface BalModalCardActions {
    }
    interface BalModalTitle {
    }
    interface BalNavbar {
        "light"?: boolean;
        "logoHref"?: string;
    }
    interface BalPagination {
        /**
          * Disables component
         */
        "disabled"?: boolean;
        /**
          * Triggers when a page change happens
         */
        "onBalChange"?: (event: CustomEvent<number>) => void;
        /**
          * Specify the max visible pages before and after the selected page
         */
        "pageRange"?: number;
        /**
          * The total amount of pages
         */
        "totalPages"?: number;
        /**
          * Current selected page
         */
        "value"?: number;
    }
    interface BalSpinner {
    }
    interface BalTabItem {
        /**
          * Tell's if the tab is active and the content is visible.
         */
        "active"?: boolean;
        /**
          * If `true` a small red bubble is added to the tab.
         */
        "bubble"?: boolean;
        /**
          * If `true` the tab is disabled.
         */
        "disabled"?: boolean;
        /**
          * Label for the tab.
         */
        "label"?: string;
        /**
          * Emitted when the tabs get rendered.
         */
        "onBalTabChanged"?: (event: CustomEvent<any>) => void;
        /**
          * This is the key of the tab.
         */
        "value"?: string;
    }
    interface BalTabs {
        /**
          * If `true` the the padding gets reduced.
         */
        "dense"?: boolean;
        /**
          * If `true` the field expands over the whole width.
         */
        "expanded"?: boolean;
        /**
          * Emitted when the changes has finished.
         */
        "onBalTabsDidChange"?: (event: CustomEvent<TabItemOptions>) => void;
        /**
          * If you want the rounded tab style.
         */
        "rounded"?: boolean;
    }
    interface BalTag {
        /**
          * The theme type of the tag. Given by bulma our css framework.
         */
        "type"?: "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger" | "";
    }
    interface BalTimeinput {
        /**
          * If `true` the button is disabled
         */
        "disabled"?: boolean;
        /**
          * Latest date available for selection
         */
        "maxTime"?: string;
        /**
          * Earliest date available for selection
         */
        "minTime"?: string;
        /**
          * Emitted when either the hour or minute input field loses focus.
         */
        "onBalBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when either the hour or the minute input has changed. It will not be triggert if either hour or time input has never been set (i.e. "--" is selected).
         */
        "onBalTimeinputChange"?: (event: CustomEvent<string>) => void;
        /**
          * The value of the datepicker with the format `hh:mm`.
         */
        "value"?: string;
    }
    interface BalToast {
        /**
          * The theme type of the toast. Given by bulma our css framework.
         */
        "type"?: "is-primary" | "is-info" | "is-success" | "is-warning" | "is-danger";
    }
    interface IntrinsicElements {
        "bal-accordion": BalAccordion;
        "bal-button": BalButton;
        "bal-card": BalCard;
        "bal-card-actions": BalCardActions;
        "bal-card-button": BalCardButton;
        "bal-card-content": BalCardContent;
        "bal-card-heading": BalCardHeading;
        "bal-card-subtitle": BalCardSubtitle;
        "bal-card-title": BalCardTitle;
        "bal-data": BalData;
        "bal-data-item": BalDataItem;
        "bal-data-label": BalDataLabel;
        "bal-data-value": BalDataValue;
        "bal-datepicker": BalDatepicker;
        "bal-datetimepicker": BalDatetimepicker;
        "bal-dropdown": BalDropdown;
        "bal-dropdown-option": BalDropdownOption;
        "bal-field": BalField;
        "bal-filter-button": BalFilterButton;
        "bal-hint": BalHint;
        "bal-hint-text": BalHintText;
        "bal-hint-title": BalHintTitle;
        "bal-icon": BalIcon;
        "bal-list": BalList;
        "bal-list-item": BalListItem;
        "bal-list-item-content": BalListItemContent;
        "bal-list-item-icon": BalListItemIcon;
        "bal-list-item-subtitle": BalListItemSubtitle;
        "bal-list-item-title": BalListItemTitle;
        "bal-modal": BalModal;
        "bal-modal-actions": BalModalActions;
        "bal-modal-card": BalModalCard;
        "bal-modal-card-actions": BalModalCardActions;
        "bal-modal-title": BalModalTitle;
        "bal-navbar": BalNavbar;
        "bal-pagination": BalPagination;
        "bal-spinner": BalSpinner;
        "bal-tab-item": BalTabItem;
        "bal-tabs": BalTabs;
        "bal-tag": BalTag;
        "bal-timeinput": BalTimeinput;
        "bal-toast": BalToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bal-accordion": LocalJSX.BalAccordion & JSXBase.HTMLAttributes<HTMLBalAccordionElement>;
            "bal-button": LocalJSX.BalButton & JSXBase.HTMLAttributes<HTMLBalButtonElement>;
            "bal-card": LocalJSX.BalCard & JSXBase.HTMLAttributes<HTMLBalCardElement>;
            "bal-card-actions": LocalJSX.BalCardActions & JSXBase.HTMLAttributes<HTMLBalCardActionsElement>;
            "bal-card-button": LocalJSX.BalCardButton & JSXBase.HTMLAttributes<HTMLBalCardButtonElement>;
            "bal-card-content": LocalJSX.BalCardContent & JSXBase.HTMLAttributes<HTMLBalCardContentElement>;
            "bal-card-heading": LocalJSX.BalCardHeading & JSXBase.HTMLAttributes<HTMLBalCardHeadingElement>;
            "bal-card-subtitle": LocalJSX.BalCardSubtitle & JSXBase.HTMLAttributes<HTMLBalCardSubtitleElement>;
            "bal-card-title": LocalJSX.BalCardTitle & JSXBase.HTMLAttributes<HTMLBalCardTitleElement>;
            "bal-data": LocalJSX.BalData & JSXBase.HTMLAttributes<HTMLBalDataElement>;
            "bal-data-item": LocalJSX.BalDataItem & JSXBase.HTMLAttributes<HTMLBalDataItemElement>;
            "bal-data-label": LocalJSX.BalDataLabel & JSXBase.HTMLAttributes<HTMLBalDataLabelElement>;
            "bal-data-value": LocalJSX.BalDataValue & JSXBase.HTMLAttributes<HTMLBalDataValueElement>;
            "bal-datepicker": LocalJSX.BalDatepicker & JSXBase.HTMLAttributes<HTMLBalDatepickerElement>;
            "bal-datetimepicker": LocalJSX.BalDatetimepicker & JSXBase.HTMLAttributes<HTMLBalDatetimepickerElement>;
            "bal-dropdown": LocalJSX.BalDropdown & JSXBase.HTMLAttributes<HTMLBalDropdownElement>;
            "bal-dropdown-option": LocalJSX.BalDropdownOption & JSXBase.HTMLAttributes<HTMLBalDropdownOptionElement>;
            "bal-field": LocalJSX.BalField & JSXBase.HTMLAttributes<HTMLBalFieldElement>;
            "bal-filter-button": LocalJSX.BalFilterButton & JSXBase.HTMLAttributes<HTMLBalFilterButtonElement>;
            "bal-hint": LocalJSX.BalHint & JSXBase.HTMLAttributes<HTMLBalHintElement>;
            "bal-hint-text": LocalJSX.BalHintText & JSXBase.HTMLAttributes<HTMLBalHintTextElement>;
            "bal-hint-title": LocalJSX.BalHintTitle & JSXBase.HTMLAttributes<HTMLBalHintTitleElement>;
            "bal-icon": LocalJSX.BalIcon & JSXBase.HTMLAttributes<HTMLBalIconElement>;
            "bal-list": LocalJSX.BalList & JSXBase.HTMLAttributes<HTMLBalListElement>;
            "bal-list-item": LocalJSX.BalListItem & JSXBase.HTMLAttributes<HTMLBalListItemElement>;
            "bal-list-item-content": LocalJSX.BalListItemContent & JSXBase.HTMLAttributes<HTMLBalListItemContentElement>;
            "bal-list-item-icon": LocalJSX.BalListItemIcon & JSXBase.HTMLAttributes<HTMLBalListItemIconElement>;
            "bal-list-item-subtitle": LocalJSX.BalListItemSubtitle & JSXBase.HTMLAttributes<HTMLBalListItemSubtitleElement>;
            "bal-list-item-title": LocalJSX.BalListItemTitle & JSXBase.HTMLAttributes<HTMLBalListItemTitleElement>;
            "bal-modal": LocalJSX.BalModal & JSXBase.HTMLAttributes<HTMLBalModalElement>;
            "bal-modal-actions": LocalJSX.BalModalActions & JSXBase.HTMLAttributes<HTMLBalModalActionsElement>;
            "bal-modal-card": LocalJSX.BalModalCard & JSXBase.HTMLAttributes<HTMLBalModalCardElement>;
            "bal-modal-card-actions": LocalJSX.BalModalCardActions & JSXBase.HTMLAttributes<HTMLBalModalCardActionsElement>;
            "bal-modal-title": LocalJSX.BalModalTitle & JSXBase.HTMLAttributes<HTMLBalModalTitleElement>;
            "bal-navbar": LocalJSX.BalNavbar & JSXBase.HTMLAttributes<HTMLBalNavbarElement>;
            "bal-pagination": LocalJSX.BalPagination & JSXBase.HTMLAttributes<HTMLBalPaginationElement>;
            "bal-spinner": LocalJSX.BalSpinner & JSXBase.HTMLAttributes<HTMLBalSpinnerElement>;
            "bal-tab-item": LocalJSX.BalTabItem & JSXBase.HTMLAttributes<HTMLBalTabItemElement>;
            "bal-tabs": LocalJSX.BalTabs & JSXBase.HTMLAttributes<HTMLBalTabsElement>;
            "bal-tag": LocalJSX.BalTag & JSXBase.HTMLAttributes<HTMLBalTagElement>;
            "bal-timeinput": LocalJSX.BalTimeinput & JSXBase.HTMLAttributes<HTMLBalTimeinputElement>;
            "bal-toast": LocalJSX.BalToast & JSXBase.HTMLAttributes<HTMLBalToastElement>;
        }
    }
}
